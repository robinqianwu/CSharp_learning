C Sharp 的一些知识点

1. 不要用 == 来判断 double / float 的小数计算结果，例如0.1+0.2 == 0.3 ? 会返回false。
   因为小数在二进制数表示时，分母是不能被 2^n 来表示的数字时，它是无限循环二进制数。
   例如0.1 = 1 / 10, 10 无法被2^n 来表示。所以他们和的计算结果是一个无线循环二进制数，不是0.3
   double 是二进制浮点数（IEEE 754 标准，64 位）
		十进制小数 0.1 和 0.2 在二进制里是 无限循环小数：
		0.1 ≈ 0.00011001100110011…
		0.2 ≈ 0.0011001100110011…

	存储时只能截断近似 → 运算累积微小误差 → 结果不是精确的 0.3，而是 0.30000000000000004  
   
   如果要用来计算精确的小数结果，最后使用decimal，但是其是一个16 Bytes数，占用内存，且速度及表示数字的范围没有double块及大。

	double / float 小数不要直接用 == 比较
	使用 允许误差的比较方法
	对于财务、货币或必须精确比较的场景 → 使用 decimal

2. 尽量不要使用ArrayList，而是使用List，因为List只接受定义了的类型变量，而ArrayList什么类型的变量都接受。
	例如 12，"hello", 1.2等

3. 在逻辑判断中，"或者"用符号 "|" 表示，而不是 "||"

4. 类继承表示为: class ChildClass : ParentClass {}

5. 类继承中，声明子类的话
	public ChlidClass(p1, p2, p3) : base(p1, p2) {this.p3 = p3} 
	
6. Structure vs. Class
	1. 值类型 vs. 引用类型
	结构 (struct)
		值类型，分配在 栈 (stack) 上（除非在堆对象中作为字段）。
		赋值时是 复制整个对象。
		超出作用域会立即销毁。
	类 (class)
		引用类型，分配在 堆 (heap) 上。
		赋值时是 复制引用，多个变量可能指向同一个对象。
		由 GC (垃圾回收器) 管理生命周期。

	2. 内存分配和性能
	结构 (struct)
		适合小型、数据量少的对象（如二维坐标 Point，复数 Complex）。
		在栈上分配和销毁，性能高，不需要 GC。
		但在复制时会整体复制，可能影响性能（如果数据量很大）。
	类 (class)
		适合复杂、需要继承或多态的对象。
		在堆上分配，由 GC 管理。
		引用传递性能更优，适合大对象。
	
	Example:
	Structure Point	
		Point p1 = new Point(1, 2);
		Point p2 = p1;   // 值复制
		p2.X = 5;
		Console.WriteLine(p1.X); // 输出 1，不受影响
		
	Class Person
		Person person1 = new Person("Tom", 20);
		Person person2 = person1;  // 引用复制
		person2.Name = "Jerry";
		Console.WriteLine(person1.Name); // 输出 Jerry，同一个对象

7. Class Attribute的一些写法
	public class Person	{
		// 公开读取，但只能在类内部修改
		public string Name { get; private set; }
		// 只能类内读取，外部可以写（几乎不用，容易误用）
		public int Age { private get; set; }
	}
	默认情况下，属性的 get 和 set 的访问级别 = 属性的访问级别。
